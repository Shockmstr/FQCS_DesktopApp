import sys
from PyQt5.QtCore    import Qt
from PyQt5.QtWidgets import (QApplication, QCheckBox, QGridLayout, QGroupBox,
                             QMenu, QPushButton, QRadioButton, QVBoxLayout, 
                             QWidget, QSlider, QLabel, QHBoxLayout, QScrollArea)

class Window(QWidget):
    def __init__(self, parent=None):
        super(Window, self).__init__(parent)
        self.setWindowTitle("PyQt5 Sliders")
        self.resize(425, 392)        

        grid = QGridLayout()
        scrollWidget = QWidget()
        scrollWidget.setLayout(grid)
        scrollArea = QScrollArea()
        scrollArea.setWidgetResizable(True)
        scrollArea.setWidget(scrollWidget)   
        self.mainLayout = QHBoxLayout()
        self.mainLayout.addWidget(scrollArea)
        self.setLayout(self.mainLayout)

        for row in range(70):
            grid.addWidget(self.createExampleGroup(row, 0), row, 0)
            grid.addWidget(self.createExampleGroup(row, 1), row, 1)
            grid.addWidget(self.createExampleGroup(row, 2), row, 2)

    def createExampleGroup(self, row, column):
        numSlider = row*2+column if row==0 else row*2+column+row
        groupBox = QGroupBox("Slider {}".format(numSlider))

        self.label = QLabel()  
        self.label.setObjectName("label{}".format(numSlider))

        slider = QSlider(Qt.Horizontal)
        name = "slider{}".format(numSlider)
        slider.setObjectName(name) 
        setattr(self, name, self.label) 
        slider.setRange(1, 2000000)
        slider.setFocusPolicy(Qt.StrongFocus)
        slider.setTickPosition(QSlider.TicksBothSides)
        slider.setTickInterval(200000)
        slider.setSingleStep(1)
        slider.valueChanged[int].connect(self.changevalue)

        vbox = QVBoxLayout()
        vbox.addWidget(self.label)
        vbox.addWidget(slider)
        vbox.addStretch(1)
        groupBox.setLayout(vbox)

        return groupBox

    def changevalue(self, value):
        sender = self.sender()
        label  = getattr(self, sender.objectName())
        label.setText("{:>9,}".format(value))

if __name__ == '__main__':
    app = QApplication(sys.argv)
    clock = Window()
    clock.show()
    sys.exit(app.exec_())